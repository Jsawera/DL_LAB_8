# -*- coding: utf-8 -*-
"""DL Lab 8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/106_oMzcv-9tirJIqthJ7s_JVmubSPDH1
"""

# Step 1: Import necessary libraries
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.datasets import load_iris
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Step 2: Load the Iris dataset
data = load_iris()
X = data.data
y = data.target

# Step 3: One-hot encode the target labels
encoder = OneHotEncoder(sparse_output=False)  # âœ… Correct for latest versions
y = encoder.fit_transform(y.reshape(-1, 1))

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 5: Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Create the neural network model
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(3, activation='softmax'))  # 3 classes

# Step 7: Compile the model with categorical crossentropy
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Step 8: Train the model
history = model.fit(X_train_scaled, y_train, epochs=50, batch_size=32,
                    validation_data=(X_test_scaled, y_test))

# Step 9: Evaluate the model
loss, accuracy = model.evaluate(X_test_scaled, y_test)
print("Accuracy on Test Data:", accuracy * 100)
print("Loss Value:", loss * 100)

# Step 10: Visualize accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# (Optional) View model architecture
model.summary()